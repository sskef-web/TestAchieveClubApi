@page "/adduser"
@using TestAchieveClubApi.RepositoryItems

@inject HttpClient _http

@if (responseText == null) { }
else
{
    <MudAlert Severity="Severity.Success" Variant="Variant.Outlined">Id нового пользователя @responseText</MudAlert>
}
@if (_clubs == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <MudTextField @bind-Value="_registerParams.FirstName" Label="FirstName" T="string" Variant="Variant.Filled"></MudTextField>
    <MudTextField @bind-Value="_registerParams.LastName" Label="LastName" T="string" Variant="Variant.Filled"></MudTextField>
    <MudTextField @bind-Value="_registerParams.Email" Label="Email" T="string" Variant="Variant.Filled"></MudTextField>
    <MudTextField @bind-Value="_registerParams.Password" Label="Password" T="string" Variant="Variant.Filled"></MudTextField>
    <MudTextField @bind-Value="_registerParams.Avatar" Label="Avatar" T="string" Variant="Variant.Filled"></MudTextField>
    <MudSelect Margin="Margin.Dense" T="int" Label="Место обучения" Variant="Variant.Filled" @bind-Value="_registerParams.ClubRefId">
        @foreach (var clubName in _clubs)
        {
            <MudSelectItem @bind-Value="@clubName.Id">@clubName.Title</MudSelectItem>
        }
    </MudSelect>
    <MudButton Variant="Variant.Filled"
               ButtonType="ButtonType.Submit"
               FullWidth="true"
               @onclick="() => NewUser(_hash)">Добавить</MudButton>
}

@code 
{
    private List<TestAchieveClubApi.RepositoryItems.Club> _clubs;
    private HashService _hash = new HashService();
    private RegisterParams _registerParams = new RegisterParams() { ClubRefId = 1 };
    string? responseText;

    private async Task NewUser(HashService _hashService)
    {
        try
        {
            _registerParams.Password = _hash.HashPassword(_registerParams.Password).ToString();
            var response = await _http.PostAsJsonAsync("users", _registerParams.ToUser());
            responseText = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _clubs = await _http.GetFromJsonAsync<List<TestAchieveClubApi.RepositoryItems.Club>>("clubs");
    }
}