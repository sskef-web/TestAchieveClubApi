@page "/users"

@using MudBlazor
@using TestAchieveClubApi.RepositoryItems
@using Syncfusion.Maui.Popup;

@inject HttpClient _http
@inject IDialogService DialogService


@if (_users == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    @foreach (var user in _users)
    {
        <MudPaper Width="100%" Style="margin:2% 0 2% 0;border-radius:15px; padding:2%;" Elevation="3">
            <MudContainer MaxWidth="MaxWidth.Small">
                <MudText Typo="Typo.h6">User ID: @user.Id</MudText>
                <MudTextField Style="margin-right:0.5%;margin-left:0.5%;margin-bottom:1%;" Label="Имя" @bind-Value="@user.FirstName" T="string" Variant="Variant.Filled" />
                <MudTextField Lines="5" Style="margin-right:0.5%;margin-left:0.5%;margin-bottom:1%;" Label="Фамилия" @bind-Value="@user.LastName" T="string" Variant="Variant.Filled" />
                <MudTextField Style="margin-right:0.5%;margin-left:0.5%;margin-bottom:1%;" Label="Email" @bind-Value="@user.Email" T="string" Variant="Variant.Filled" />
                <MudTextField Style="margin-right:0.5%;margin-left:0.5%;margin-bottom:1%;" Label="Аватар" @bind-Value="@user.Avatar" T="string" Variant="Variant.Filled" />
                <MudSelect Margin="Margin.Dense" T="int" Label="Место обучения" Variant="Variant.Filled" @bind-Value="@user.ClubRefId">
                    @foreach (var clubName in _clubs)
                    {
                        <MudSelectItem @bind-Value="@clubName.Id">@clubName.Title</MudSelectItem>
                    }
                </MudSelect>
                <MudPaper Width="100%" Style="margin:2% 0 2% 0;border-radius:15px;padding:5%;">
                    <MudTextField FullWidth="true" Style="margin-right:0.5%;margin-left:0.5%;margin-bottom:1%;" Label="Новый пароль" @bind-Value="@_newPassword" T="string" Variant="Variant.Outlined" />
                    <div class="userPassButtons">
                        <MudButton Style="width:49.5%;margin-right:0.5%;" Variant="Variant.Filled" @onclick="()=>ChangeUserPassword(user.Id)">
                            Установить
                        </MudButton>
                        <MudButton Style="width:49.5%;margin-left:0.5%;" Variant="Variant.Filled" @onclick="ClearNewPassword">
                            Очистить
                        </MudButton>
                    </div>
                </MudPaper>
                <div class="columns">
                    <MudButton Style="width:49.5%;margin-right:0.5%;" Variant="Variant.Filled" @onclick="()=>EditUser(user)">
                        Сохранить пользователя
                    </MudButton>
                    <MudButton Style="width:49.5%;margin-left:0.5%;" Variant="Variant.Filled" @onclick="()=>DeleteUser(user.Id)">
                        Удалить пользователя
                    </MudButton>
                </div>
            </MudContainer>
        </MudPaper>
    }
}
<MudButton FullWidth="true" Variant="Variant.Filled" @onclick="AddUser">
    Добавить Нового пользователя
</MudButton>

@code
{
    @inject NavigationManager NavigationManager;
    private List<TestAchieveClubApi.RepositoryItems.Club> _clubs;
    private List<User> _users;
    private HashService _hashService = new HashService();

    User newUser = new User
        {
            FirstName = "Имя",
            LastName = "Фамилия",
            Email = "Почта",
            Avatar = "/image/avatars/8.jpg",
            Password = "password",
            ClubRefId = 1,
        };

    private string _newPassword;

    private async void ChangeUserPassword(int userId)
    {
        User currentUser = _users.Find(user => user.Id == userId);

        string newPasswordHash = _hashService.HashPassword(_newPassword).ToString();
        currentUser.Password = newPasswordHash;

        PostUser(currentUser);
    }

    private void AddUser()
    {
        PostUser(newUser);
        ReloadPage();
    }

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async void EditUser(User user)
    {
        PostUser(user);

        ReloadPage();
    }

    private async Task DeleteUser(int id)
    {
        await _http.DeleteFromJsonAsync($"users/{id}", null);

        ReloadPage();
    }

    protected async Task PostUser(User postUser)
    {
        await _http.PutAsJsonAsync($"users/{postUser.Id}", postUser);
    }

    private void ClearNewPassword()
    {
        _newPassword = "";
    }

    protected override async Task OnInitializedAsync()
    {
        _users = await _http.GetFromJsonAsync<List<User>>("users");
        _clubs = await _http.GetFromJsonAsync<List<TestAchieveClubApi.RepositoryItems.Club>>("clubs");
    }
}
